/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.langchain4j.agent.springboot;

import dev.langchain4j.memory.chat.ChatMemoryProvider;
import dev.langchain4j.model.chat.ChatModel;
import dev.langchain4j.rag.RetrievalAugmentor;
import org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * LangChain4j Agent component
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.component.langchain4j-agent")
public class LangChain4jAgentComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the langchain4j-agent component.
     * This is enabled by default.
     */
    private Boolean enabled;
    /**
     * The configuration. The option is a
     * org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration type.
     */
    private LangChain4jAgentConfiguration configuration;
    /**
     * Comma-separated list of input guardrail class names to validate user
     * input before sending to LLM
     */
    private String inputGuardrails;
    /**
     * Whether the producer should be started lazy (on the first message). By
     * starting lazy you can use this to allow CamelContext and routes to
     * startup in situations where a producer may otherwise fail during starting
     * and cause the route to fail being started. By deferring this startup to
     * be lazy then the startup failure can be handled during routing messages
     * via Camel's routing error handlers. Beware that when the first message is
     * processed then creating and starting the producer may take a little time
     * and prolong the total processing time of the processing.
     */
    private Boolean lazyStartProducer = false;
    /**
     * Comma-separated list of output guardrail class names to validate LLM
     * responses
     */
    private String outputGuardrails;
    /**
     * Tags for discovering and calling Camel route tools
     */
    private String tags;
    /**
     * Whether autowiring is enabled. This is used for automatic autowiring
     * options (the option must be marked as autowired) by looking up in the
     * registry to find if there is a single instance of matching type, which
     * then gets configured on the component. This can be used for automatic
     * configuring JDBC data sources, JMS connection factories, AWS Clients,
     * etc.
     */
    private Boolean autowiredEnabled = true;
    /**
     * Chat Memory Provider of type dev.langchain4j.memory.ChatMemoryProvider.
     * Note for this to be successful, you need to use a reliable
     * ChatMemoryStore. This provider supposes that a user has multiple
     * sessions, if need only a single session, use a default memoryId. The
     * option is a dev.langchain4j.memory.chat.ChatMemoryProvider type.
     */
    private ChatMemoryProvider chatMemoryProvider;
    /**
     * Chat Model of type dev.langchain4j.model.chat.ChatModel. The option is a
     * dev.langchain4j.model.chat.ChatModel type.
     */
    private ChatModel chatModel;
    /**
     * Retrieval Augmentor for advanced RAG of type
     * dev.langchain4j.rag.RetrievalAugmentor. This allows using RAG on both
     * Naive and Advanced RAG. The option is a
     * dev.langchain4j.rag.RetrievalAugmentor type.
     */
    private RetrievalAugmentor retrievalAugmentor;

    public LangChain4jAgentConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(LangChain4jAgentConfiguration configuration) {
        this.configuration = configuration;
    }

    public String getInputGuardrails() {
        return inputGuardrails;
    }

    public void setInputGuardrails(String inputGuardrails) {
        this.inputGuardrails = inputGuardrails;
    }

    public Boolean getLazyStartProducer() {
        return lazyStartProducer;
    }

    public void setLazyStartProducer(Boolean lazyStartProducer) {
        this.lazyStartProducer = lazyStartProducer;
    }

    public String getOutputGuardrails() {
        return outputGuardrails;
    }

    public void setOutputGuardrails(String outputGuardrails) {
        this.outputGuardrails = outputGuardrails;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public Boolean getAutowiredEnabled() {
        return autowiredEnabled;
    }

    public void setAutowiredEnabled(Boolean autowiredEnabled) {
        this.autowiredEnabled = autowiredEnabled;
    }

    public ChatMemoryProvider getChatMemoryProvider() {
        return chatMemoryProvider;
    }

    public void setChatMemoryProvider(ChatMemoryProvider chatMemoryProvider) {
        this.chatMemoryProvider = chatMemoryProvider;
    }

    public ChatModel getChatModel() {
        return chatModel;
    }

    public void setChatModel(ChatModel chatModel) {
        this.chatModel = chatModel;
    }

    public RetrievalAugmentor getRetrievalAugmentor() {
        return retrievalAugmentor;
    }

    public void setRetrievalAugmentor(RetrievalAugmentor retrievalAugmentor) {
        this.retrievalAugmentor = retrievalAugmentor;
    }
}