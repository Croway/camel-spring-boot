{
  "groups": [
    {
      "name": "camel.component.dapr",
      "type": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.dapr.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.dapr.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.dapr.concurrency",
      "type": "io.dapr.client.domain.StateOptions$Concurrency",
      "description": "Concurrency mode to use with state operations",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.configuration",
      "type": "org.apache.camel.component.dapr.DaprConfiguration",
      "description": "The component configurations. The option is a org.apache.camel.component.dapr.DaprConfiguration type.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.consistency",
      "type": "io.dapr.client.domain.StateOptions$Consistency",
      "description": "Consistency level to use with state operations",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.content-type",
      "type": "java.lang.String",
      "description": "The contentType for the Pub\/Sub component to use.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.dapr.e-tag",
      "type": "java.lang.String",
      "description": "The eTag for optimistic concurrency during state save or delete operations",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the dapr component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.http-extension",
      "type": "io.dapr.client.domain.HttpExtension",
      "description": "HTTP method to use when invoking the service. Accepts verbs like GET, POST, PUT, DELETE, etc. Creates a minimal HttpExtension with no headers or query params. Takes precedence over verb. The option is a io.dapr.client.domain.HttpExtension type.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.key",
      "type": "java.lang.String",
      "description": "The key used to identify the state object within the specified state store",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.dapr.method-to-invoke",
      "type": "java.lang.String",
      "description": "The name of the method or route to invoke on the target service",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.preview-client",
      "type": "io.dapr.client.DaprPreviewClient",
      "description": "The client to consume messages by the consumer. The option is a io.dapr.client.DaprPreviewClient type.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.pub-sub-name",
      "type": "java.lang.String",
      "description": "The name of the Dapr Pub\/Sub component to use. This identifies which underlying messaging system Dapr will interact with for publishing or subscribing to events.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.service-to-invoke",
      "type": "java.lang.String",
      "description": "Target service to invoke. Can be a Dapr App ID, a named HTTPEndpoint, or a FQDN\/public URL",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.state-operation",
      "type": "org.apache.camel.component.dapr.StateOperation",
      "description": "The state operation to perform on the state store. Required for DaprOperation.state operation",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "defaultValue": "get"
    },
    {
      "name": "camel.component.dapr.state-store",
      "type": "java.lang.String",
      "description": "The name of the Dapr state store to interact with, defined in statestore.yaml config",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.topic",
      "type": "java.lang.String",
      "description": "The name of the topic to subscribe to. The topic must exist in the Pub\/Sub component configured under the given pubsubName.",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration"
    },
    {
      "name": "camel.component.dapr.verb",
      "type": "java.lang.String",
      "description": "The HTTP verb to use for invoking the method",
      "sourceType": "org.apache.camel.component.dapr.springboot.DaprComponentConfiguration",
      "defaultValue": "POST"
    }
  ],
  "hints": []
}