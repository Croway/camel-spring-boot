{
  "groups": [
    {
      "name": "camel.dataformat.soap",
      "type": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.customizer",
      "type": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.dataformat.soap.context-path",
      "type": "java.lang.String",
      "description": "Package name where your JAXB classes are located.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.dataformat.soap.element-name-strategy",
      "type": "java.lang.String",
      "description": "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.apache.camel.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy. The option is a org.apache.camel.dataformat.soap.name.ElementNameStrategy type.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the soap data format. This is enabled by default.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.encoding",
      "type": "java.lang.String",
      "description": "To overrule and use a specific encoding",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.ignore-unmarshalled-headers",
      "type": "java.lang.Boolean",
      "description": "Whether to ignore headers that was not unmarshalled. By default, headers which could not be unmarshalled is recorded in the org.apache.camel.dataformat.soap.UNMARSHALLED_HEADER_LIST header which allows to inspect any problematic header.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.soap.namespace-prefix",
      "type": "java.util.Map",
      "description": "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.schema",
      "type": "java.lang.String",
      "description": "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.soap.version",
      "type": "java.lang.String",
      "description": "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
      "sourceType": "org.apache.camel.dataformat.soap.springboot.SoapDataFormatConfiguration",
      "defaultValue": "1.1"
    }
  ],
  "hints": [],
  "ignored": {
    "properties": []
  }
}